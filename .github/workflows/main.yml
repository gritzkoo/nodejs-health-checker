name: test
on:
  - push
jobs:
  test:
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     # keep the versions below up to date with https://nodejs.org/en/about/releases/
    #     # use only up to lts
    #     node-version: [20.x]
    #     # redis-version: [6]
    # services:
    #   postgresql:
    #     image: postgres
    #     env:
    #       POSTGRES_PASSWORD: root
    #     ports:
    #       - 5432:5432
    #   dynamodb:
    #     image: amazon/dynamodb-local
    #     ports:
    #       - "8000:8000"
    #   memcache:
    #     image: memcached:1.4.21
    #     ports:
    #       - 11211:11211
    #   redis:
    #     image: redis
    #     ports:
    #       - 6379:6379

    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      # - name: Configure Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: ${{ matrix.node-version }}
      # - name: Cache node_modules
      #   id: cache-modules
      #   uses: actions/cache@v2
      #   with:
      #     path: node_modules
      #     key: ${{ matrix.node-version }}-${{ runner.OS }}-build-${{ hashFiles('package.json') }}
      # - name: Install npm in version ${{ matrix.node-version }}
      #   if: steps.cache-modules.outputs.cache-hit != 'true'
      #   run: npm install --legacy-peer-deps
      # - name: Run test in version ${{ matrix.node-version }}
      #   run: npm run test:coverage
      #   env:
      #     CI: true
      - name: use docker to test
        run: |
          docker compose run --rm test bash -c 'npm install --legacy-peer-deps && npm run test:coverage'
      - name: upload coverage artifact v${{ matrix.node-version }}
        uses: actions/upload-artifact@v2
        with:
          name: coveragev-${{ matrix.node-version }}
          path: coverage/lcov.info

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: coveragev-20.x
          path: coverage
      - name: Generate coverage in coverall
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build application
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "20"

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: 20.x-${{ runner.OS }}-build-${{ hashFiles('package.json') }}

      - name: Install NPM
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Build application
        run: npm run build

      - name: Generate dist artifact v${{ matrix.node-version }}
        uses: actions/upload-artifact@v2
        with:
          name: dist-folder
          path: dist/**/*
          if-no-files-found: error

  validate:
    name: check version is valid to release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Validate if can be published
        run: |
          REVIEW_JS=`npm view --json`
          ATUAL_VERSION=`cat package.json | jq '.version'`
          if [[ `echo ${REVIEW_JS} | jq -c '.versions[]'` ]]; then
            echo ${REVIEW_JS} | jq -c '.versions[]' | while read line; do
              if [ "${line}" == "${ATUAL_VERSION}" ]; then
                echo "$line is equals to ${ATUAL_VERSION}"
                echo "Version already released!"
                exit 1
              fi
            done
          else
            echo "all clear to go"
          fi
  publish:
    name: NPM package publish
    needs:
      - build
      - validate
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"
      - uses: actions/download-artifact@v2
        with:
          name: dist-folder
          path: dist
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create Release
        run: |
          NEW_TAG=`cat package.json | jq -cr ".version"`
          NOTES=`git show -s --format="%s%n%n%b"`
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh release create "v${NEW_TAG}" --title "v${NEW_TAG}" --notes "${NOTES}"

